{{- if .Values.webhook.certificates.autoGenerate }}
{{- $webHookName := ( printf "eks-inject-webhook-svc.%s.svc" .Release.Namespace ) -}}
{{- $altNames := list ( printf "eks-inject-webhook-svc.%s.svc" .Release.Namespace ) ( printf "eks-inject-webhook-svc.%s.svc.cluster.local" .Release.Namespace ) -}}
{{- $ca := genCA "aws-injector-ca" 3650 -}}
{{- $cert := genSignedCert ( printf "eks-inject-webhook-svc.%s.svc" .Release.Namespace ) nil $altNames 730 $ca -}}
{{- $rootCaCert := ($ca.Cert | b64enc) }}
{{- $serverCert := ($cert.Cert | b64enc) }}
{{- $serverKey := ($cert.Key | b64enc) }}
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: eks-inject-webhook
webhooks:
  - name: {{ $webHookName }}
    clientConfig:
      service:
        name: eks-inject-webhook-svc
        namespace: "{{ .Release.Namespace }}"
        path: "/inject"
      caBundle: {{ $rootCaCert }}
    failurePolicy: {{ .Values.webhook.failurePolicy }}
    namespaceSelector:
      matchLabels:
        mutate-webhook: aws-inject
    rules:
      - operations: ["CREATE"]
        apiGroups: ["*"]
        apiVersions: ["v1"]
        resources: ["deployments", "daemonsets", "configmaps"]
        scope: "*"
    admissionReviewVersions: ["v1"]
    sideEffects: None
    timeoutSeconds: 5
---
apiVersion: v1
kind: Secret
metadata:
  name: eks-inject-webhook-certs
type: kubernetes.io/tls
data:
  tls.crt: {{ $serverCert }}
  tls.key: {{ $serverKey }}
{{ end }}
